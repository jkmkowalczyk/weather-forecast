import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component, Children, cloneElement, isValidElement } from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid/v4';
import isFunction from 'lodash-es/isFunction';
import attempt from 'lodash-es/attempt';
import Hidden from '../Hidden';
import getModifiedProps from '../../utils/getModifiedProps';

var PlotBand = function (_Component) {
  _inherits(PlotBand, _Component);

  function PlotBand(props) {
    _classCallCheck(this, PlotBand);

    var _this = _possibleConstructorReturn(this, (PlotBand.__proto__ || _Object$getPrototypeOf(PlotBand)).call(this, props));

    _this.getPlotBandConfig = function () {
      var _this$props = _this.props,
          id = _this$props.id,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ['id', 'children']);

      if (!_this.id) {
        _this.id = isFunction(id) ? id() : id;
      }

      return _extends({
        id: _this.id
      }, rest);
    };

    _this.state = {
      rendered: false
    };
    return _this;
  }

  _createClass(PlotBand, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var axis = this.props.getAxis();

      // Create Highcharts Plot Band on Axis
      var opts = this.getPlotBandConfig();
      axis.addPlotBand(opts);

      this.setState({
        rendered: true
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (getModifiedProps(prevProps, this.props) === false) return;

      var axis = this.props.getAxis();
      // Plot Bands cannot be updated, we have to remove and re-add
      var opts = this.getPlotBandConfig();
      axis.removePlotBand(opts.id);
      axis.addPlotBand(opts);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var axis = this.props.getAxis();
      attempt(axis.removePlotBand, this.id);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var children = this.props.children;

      if (!children || !this.state.rendered) return null;

      var bandChildren = Children.map(children, function (child) {
        if (isValidElement(child) === false) return child;
        return cloneElement(child, { id: _this2.id });
      });

      return React.createElement(
        Hidden,
        null,
        bandChildren
      );
    }
  }]);

  return PlotBand;
}(Component);

PlotBand.defaultProps = {
  id: uuid
};


export default PlotBand;