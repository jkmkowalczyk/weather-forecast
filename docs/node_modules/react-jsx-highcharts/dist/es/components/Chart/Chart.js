import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { Component } from 'react';
import PropTypes from 'prop-types';
import { addEventHandlersManually, getNonEventHandlerProps } from '../../utils/events';
import getModifiedProps from '../../utils/getModifiedProps';

var Chart = function (_Component) {
  _inherits(Chart, _Component);

  function Chart() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Chart);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Chart.__proto__ || _Object$getPrototypeOf(Chart)).call.apply(_ref, [this].concat(args))), _this), _this.updateChart = function (config) {
      var chart = _this.props.getChart();
      chart.update({
        chart: config
      }, true);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Chart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          getHighcharts = _props.getHighcharts,
          getChart = _props.getChart,
          children = _props.children,
          rest = _objectWithoutProperties(_props, ['getHighcharts', 'getChart', 'children']);

      var notEventProps = getNonEventHandlerProps(rest);
      var chart = getChart();

      this.updateChart(_extends({}, notEventProps));

      addEventHandlersManually(getHighcharts(), chart.object, rest);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var modifiedProps = getModifiedProps(prevProps, this.props);
      if (modifiedProps !== false) {
        this.updateChart(modifiedProps);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return Chart;
}(Component);

Chart.defaultProps = {
  type: 'line',
  onAddSeries: function onAddSeries() {},
  onAfterPrint: function onAfterPrint() {},
  onBeforePrint: function onBeforePrint() {},
  onClick: function onClick() {},
  onLoad: function onLoad() {},
  onRedraw: function onRedraw() {},
  onRender: function onRender() {},
  onSelection: function onSelection() {}
};


export default Chart;