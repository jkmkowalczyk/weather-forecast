import _Object$keys from 'babel-runtime/core-js/object/keys';
import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid/v4';
import isFunction from 'lodash-es/isFunction';
import isEqual from 'lodash-es/isEqual';
import attempt from 'lodash-es/attempt';
import isImmutable from 'is-immutable';
import immutableEqual from 'immutable-is';
import { Provider } from '../SeriesContext';
import addEventProps, { getNonEventHandlerProps } from '../../utils/events';
import getModifiedProps from '../../utils/getModifiedProps';
import { logSeriesErrorMessage } from '../../utils/warnings';

var Series = function (_Component) {
  _inherits(Series, _Component);

  function Series(props) {
    _classCallCheck(this, Series);

    var _this = _possibleConstructorReturn(this, (Series.__proto__ || _Object$getPrototypeOf(Series)).call(this, props));

    _this.getSeriesConfig = function () {
      var _this$props = _this.props,
          id = _this$props.id,
          data = _this$props.data,
          requiresAxis = _this$props.requiresAxis,
          getAxis = _this$props.getAxis,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ['id', 'data', 'requiresAxis', 'getAxis', 'children']);

      var seriesId = isFunction(id) ? id() : id;
      var seriesData = isImmutable(data) ? data.toJS() : data;
      var nonEventProps = getNonEventHandlerProps(rest);

      var config = _extends({
        id: seriesId,
        data: seriesData
      }, nonEventProps);

      if (requiresAxis) {
        var axis = getAxis();
        config[axis.type] = axis.id;
      }

      return config;
    };

    if (process.env.NODE_ENV === 'development') {
      var type = props.type,
          getHighcharts = props.getHighcharts;

      var seriesTypes = _Object$keys(getHighcharts().seriesTypes);
      if (seriesTypes.indexOf(type) === -1) logSeriesErrorMessage(type);
    }
    return _this;
  }

  _createClass(Series, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var chart = this.props.getChart();

      // Create Highcharts Series
      var opts = this.getSeriesConfig();
      this.series = chart.addSeries(opts, true);

      var update = this.series.update.bind(this.series);
      addEventProps(update, this.props);

      // Re-render to pass this.series to Provider
      this.forceUpdate();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _props = this.props,
          visible = _props.visible,
          data = _props.data,
          rest = _objectWithoutProperties(_props, ['visible', 'data']);

      // Using setData is more performant than update


      if (isImmutable(data) && immutableEqual(data, prevProps.data) === false) {
        this.series.setData(data.toJS(), true);
      } else if (isEqual(data, prevProps.data) === false) {
        this.series.setData(data, true);
      }
      if (visible !== prevProps.visible) {
        this.series.setVisible(visible);
      }

      var modifiedProps = getModifiedProps(prevProps, rest);
      if (modifiedProps !== false) {
        this.series.update(modifiedProps);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      attempt(this.series.remove.bind(this.series)); // Series may have already been removed, i.e. when Axis unmounted
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.series) return null;

      return React.createElement(
        Provider,
        { value: this.series },
        this.props.children
      );
    }
  }]);

  return Series;
}(Component);

Series.defaultProps = {
  type: 'line',
  id: uuid,
  children: null,
  data: [],
  requiresAxis: true,
  visible: true
};


export default Series;