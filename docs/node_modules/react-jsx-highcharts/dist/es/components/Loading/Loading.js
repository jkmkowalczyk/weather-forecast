import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import { Component } from 'react';
import PropTypes from 'prop-types';
import attempt from 'lodash-es/attempt';
import getModifiedProps from '../../utils/getModifiedProps';

var Loading = function (_Component) {
  _inherits(Loading, _Component);

  function Loading() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Loading);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Loading.__proto__ || _Object$getPrototypeOf(Loading)).call.apply(_ref, [this].concat(args))), _this), _this.updateLoading = function (config) {
      var chart = _this.props.getChart();
      chart.update({
        loading: config
      }, true);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Loading, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          children = _props.children,
          isLoading = _props.isLoading,
          getChart = _props.getChart,
          rest = _objectWithoutProperties(_props, ['children', 'isLoading', 'getChart']);

      this.updateLoading(rest);
      if (isLoading) {
        var chart = getChart();
        chart.showLoading(children);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _props2 = this.props,
          children = _props2.children,
          isLoading = _props2.isLoading,
          getChart = _props2.getChart,
          rest = _objectWithoutProperties(_props2, ['children', 'isLoading', 'getChart']);

      var modifiedProps = getModifiedProps(prevProps, rest);

      if (modifiedProps !== false) {
        this.updateLoading(modifiedProps);
      }
      if (isLoading !== prevProps.isLoading) {
        var chart = getChart();
        if (isLoading) chart.showLoading(children);
        if (!isLoading) chart.hideLoading();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var chart = this.props.getChart();
      attempt(chart.hideLoading);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return Loading;
}(Component);

Loading.defaultProps = {
  isLoading: true
};


export default Loading;