import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Provider } from '../ChartContext';
import { validChartTypes } from '../../utils/propTypeValidators';

var BaseChart = function (_Component) {
  _inherits(BaseChart, _Component);

  function BaseChart(props) {
    _classCallCheck(this, BaseChart);

    var _this = _possibleConstructorReturn(this, (BaseChart.__proto__ || _Object$getPrototypeOf(BaseChart)).call(this, props));

    _this.initHighcharts = function () {
      if (!_this.domNode) {
        return;
      }

      var _this$props = _this.props,
          chartCreationFunc = _this$props.chartCreationFunc,
          callback = _this$props.callback,
          polar = _this$props.polar,
          gauge = _this$props.gauge,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ['chartCreationFunc', 'callback', 'polar', 'gauge', 'children']);

      var opts = _extends({
        chart: {},
        title: {
          text: null
        },
        subtitle: {
          text: null
        },
        legend: {
          enabled: false
        },
        rangeSelector: {
          enabled: false
        },
        navigator: {
          enabled: false
        },
        scrollbar: {
          enabled: false
        },
        tooltip: {
          enabled: false
        },
        credits: {
          enabled: false
        },
        series: [],
        xAxis: [],
        yAxis: []
      }, rest);
      _this.chart = chartCreationFunc(_this.domNode, opts);

      _this.chart.polar = polar;
      _this.chart.angular = gauge;

      callback(_this.chart);

      _this.setState({
        rendered: true
      });
    };

    _this.state = {
      rendered: false
    };
    return _this;
  }

  _createClass(BaseChart, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Need to wait for CSS to be applied to parent nodes, or chart is rendered at wrong size
      window.setTimeout(this.initHighcharts, 0);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.chart) {
        // Fixes #14
        window.setTimeout(this.chart.destroy.bind(this.chart), 1);
        this.chart.__destroyed = true;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          chartType = _props.chartType,
          children = _props.children;


      return React.createElement(
        'div',
        {
          className: 'chart ' + this.props.className,
          ref: function ref(node) {
            _this2.domNode = node;
          } },
        this.state.rendered && React.createElement(
          Provider,
          { value: { chart: this.chart, chartType: chartType } },
          children
        )
      );
    }
  }]);

  return BaseChart;
}(Component);

BaseChart.defaultProps = {
  children: null,
  className: '',
  callback: function callback() {}
};


export default BaseChart;