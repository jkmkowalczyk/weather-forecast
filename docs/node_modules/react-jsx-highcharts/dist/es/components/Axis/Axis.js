import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component, Children, cloneElement, isValidElement } from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid/v4';
import isFunction from 'lodash-es/isFunction';
import attempt from 'lodash-es/attempt';
import { Provider } from '../AxisContext';
import addEventProps, { getNonEventHandlerProps } from '../../utils/events';
import getModifiedProps from '../../utils/getModifiedProps';
import { validAxisTypes } from '../../utils/propTypeValidators';
import { logZAxisErrorMessage } from '../../utils/warnings';

var Axis = function (_Component) {
  _inherits(Axis, _Component);

  function Axis(props) {
    _classCallCheck(this, Axis);

    var _this = _possibleConstructorReturn(this, (Axis.__proto__ || _Object$getPrototypeOf(Axis)).call(this, props));

    _this.getAxisConfig = function () {
      var _this$props = _this.props,
          id = _this$props.id,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ['id', 'children']);

      var axisId = isFunction(id) ? id() : id;
      var nonEventProps = getNonEventHandlerProps(rest);
      return _extends({
        id: axisId,
        title: { text: null }
      }, nonEventProps);
    };

    if (process.env.NODE_ENV === 'development') {
      var id = props.id,
          getHighcharts = props.getHighcharts;

      if (id === 'zAxis' && !getHighcharts().ZAxis) logZAxisErrorMessage();
    }
    return _this;
  }

  _createClass(Axis, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          dynamicAxis = _props.dynamicAxis,
          isX = _props.isX,
          getChart = _props.getChart;

      var chart = getChart();

      // Create Highcharts Axis
      var opts = this.getAxisConfig();
      if (dynamicAxis) {
        this.axis = chart.addAxis(opts, isX, true);
      } else {
        // ZAxis cannot be added dynamically, update instead
        this.axis = chart.get('zAxis');
        this.axis.update(opts, true);
      }

      var update = this.axis.update.bind(this.axis);
      addEventProps(update, this.props);

      // Re-render to pass this.axis to Provider
      this.forceUpdate();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var modifiedProps = getModifiedProps(prevProps, this.props);
      if (modifiedProps !== false) {
        this.axis.update(modifiedProps);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      attempt(this.axis.remove.bind(this.axis)); // Axis may have already been removed, i.e. when Chart unmounted
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.axis) return null;

      return React.createElement(
        Provider,
        { value: this.axis },
        this.props.children
      );
    }
  }]);

  return Axis;
}(Component);

Axis.defaultProps = {
  id: uuid,
  children: null,
  dynamicAxis: true
};


export default Axis;